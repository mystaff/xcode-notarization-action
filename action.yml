name: 'Xcode Notarization Action'
description: 'Runs notarytool to upload a file to Apple''s notary service'
branding:
  icon: 'award'
  color: 'green'

inputs:
  app-path:
    description: 'Path of the software to notarize. Globbing is supported'
    required: true
  staple:
    description: 'Whether to run `stapler staple`'
    required: true
    default: 'true'
  keychain-profile:
    description: 'notarytool --keychain-profile parameter'
    required: true
    default: 'notary'
  zip-file-path:
    description: 'Path to zip file to be notarized'
    required: true
  apple-id:
    description: 'notarytool --apple-id parameter'
    required: true
  password:
    description: 'notarytool --password parameter'
    required: true
  team-id:
    description: 'notarytool --team-id parameter'
    required: true
  xcode-path:
    description: 'Path of the Xcode version to use'
    required: true
    default: '/Applications/Xcode.app' # available on both macos-11 and macos-12 environments
  app-title:
    description: 'Path to zip file to be notarized'
    required: true
  dmg-file-name:
    description: 'Path to zip file to be notarized'
    required: true
  dmg-background:
    description: 'Path to zip file to be notarized'
    required: true
  dmg-icon:
    description: 'Path to zip file to be notarized'
    required: true

  #${{ secrets.AWS_ACCESS_KEY_ID }}
  # ${{ secrets.AWS_SECRET_ACCESS_KEY }}
runs:
  using: 'composite'
  steps:

    - name: Setup Xcode
      run: sudo xcode-select -s ${{ inputs.xcode-path }}
      shell: bash
    - name: Prepare Notarization Credentials
      run: |
        # create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/notarization.keychain-db
        KEYCHAIN_PASS=$(uuidgen)
        security create-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
        security set-keychain-settings -lut 900 ${KEYCHAIN_PATH}
        security unlock-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
        # import credentials from secrets
        xcrun notarytool store-credentials "${{ inputs.keychain-profile }}" --apple-id "${{ inputs.apple-id }}" --password "${{ inputs.password }}" --team-id "${{ inputs.team-id }}" --keychain "${KEYCHAIN_PATH}"
      shell: bash
    - name: Notarize ${{ inputs.zip-file-path }}
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/notarization.keychain-db
        APP_FOLDER_PATH=$RUNNER_TEMP/$(basename ${{ inputs.zip-file-path }})
        xcrun notarytool submit ${{ inputs.zip-file-path }} --keychain-profile "${{ inputs.keychain-profile }}" --keychain "${KEYCHAIN_PATH}" --wait
        ditto -x -k --sequesterRsrc --rsrc "${{ inputs.zip-file-path }}"  "${APP_FOLDER_PATH}"
        DOT_APP_FOLDER= ${APP_FOLDER_PATH}/${{ inputs.app-title }}.app
        xcrun stapler staple ${DOT_APP_FOLDER}
        xcrun notarytool submit ${{ inputs.app-path }} --keychain-profile "${{ inputs.keychain-profile }}" --keychain "${KEYCHAIN_PATH}" --wait
        cat <<EOF > $RUNNER_TEMP/DmgSpecs.json
        {
          "title": "${{ inputs.app-title }}",
          "background": "${{ inputs.dmg-background }},
          "icon": "${DOT_APP_FOLDER}/Contents/Resources/${{ inputs.dmg-icon }}",
          "icon-size": 150,
          "contents": [
            { "x": 445, "y": 186, "type": "link", "path": "/Applications" },
            { "x": 135, "y": 186, "type": "file", "path": "${DOT_APP_FOLDER}" }
          ]
        }
        EOF
      shell: bash

    - name: Create DMG ${{ inputs.dmg-file-name }}
      run: |
        appdmg "$RUNNER_TEMP/DmgSpecs.json"  "$RUNNER_TEMP/${{ inputs.dmg-file-name }}"
        #bash -x build/macos/build-create-keychain2.sh
      shell: bash

    - name: Staple
      if: ${{ inputs.staple == 'true' }}
      run: xcrun stapler staple ${{ inputs.app-path }}
      shell: bash
    - name: Cleanup
      if: ${{ always() }}
      run: security delete-keychain $RUNNER_TEMP/notarization.keychain-db
      shell: bash
      continue-on-error: true
